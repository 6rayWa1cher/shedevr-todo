openapi: 3.0.2
servers:
  - url: /api/v1/
info:
  title: Todo List API
  version: 1.0.0
  description: A simple API for managing todo lists.
tags:
  - name: task
    description: Everything about your tasks
paths:
  /tasks:
    get:
      tags:
        - task
      summary: Get all tasks
      description: Retrieves a list of all tasks.
      operationId: getTasks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      tags:
        - task
      summary: Create a new task
      description: Creates a new task.
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTask"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ID of the task to retrieve or update.
        schema:
          type: integer
          format: int64
    get:
      tags:
        - task
      summary: Get a task by ID
      description: Retrieves a specific task by its ID.
      operationId: getTaskById
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          $ref: "#/components/responses/TaskNotFound"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - task
      summary: Update a task
      description: Updates a specific task by its ID.
      operationId: updateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTask"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          $ref: "#/components/responses/TaskNotFound"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - task
      summary: Delete a task
      description: Deletes a specific task by its ID.
      operationId: deleteTask
      responses:
        "204":
          description: Task deleted successfully
        "404":
          $ref: "#/components/responses/TaskNotFound"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the task.
        title:
          type: string
          description: The title of the task.
        text:
          type: string
          description: The description of the task.
        completed:
          $ref: "#/components/schemas/CompletedEnum"
        counter:
          $ref: "#/components/schemas/Counter"
      required:
        - title
        - text
        - completed

    CompletedEnum:
      type: string
      description: Indicates whether the task is completed or not.
      enum: ["yes", "no", "cancelled"]

    Counter:
      type: object
      properties:
        value:
          type: number
          description: The value of the counter
        scale:
          type: string
          description: The scale of the counter
        max_value:
          type: number
          description: The max value of the counter
      required:
        - value
        - scale
        - max_value

    NewTask:
      type: object
      properties:
        title:
          type: string
          description: The title of the new task.
        text:
          type: string
          description: The description of the task.
        completed:
          $ref: "#/components/schemas/CompletedEnum"
        counter:
          $ref: "#/components/schemas/Counter"
      required:
        - title

    UpdateTask:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the task.
        title:
          type: string
          description: The title of the new task.
        text:
          type: string
          description: The description of the task.
        completed:
          $ref: "#/components/schemas/CompletedEnum"
        counter:
          $ref: "#/components/schemas/Counter"
      required:
        - title
    Error:
      description: Represents error object
      type: object
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
      required:
        - code
        - message
  responses:
    TaskNotFound:
      description: Task not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
          example:
            error: Task not found

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
          example:
            error: Bad request, please check your request body

    Unauthorized:
      description: Unauthorized request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
          example:
            error: Unauthorized request
