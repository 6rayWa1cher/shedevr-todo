// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// NewTask defines model for NewTask.
type NewTask struct {
	// Title The title of the new task.
	Title string `json:"title"`
}

// Task defines model for Task.
type Task struct {
	// Completed Indicates whether the task is completed or not.
	Completed bool `json:"completed"`

	// Id The unique identifier for the task.
	Id *int64 `json:"id,omitempty"`

	// Title The title of the task.
	Title string `json:"title"`
}

// UpdateTask defines model for UpdateTask.
type UpdateTask struct {
	// Completed The updated completion status of the task.
	Completed bool `json:"completed"`

	// Title The updated title of the task.
	Title string `json:"title"`
}

// BadRequest defines model for BadRequest.
type BadRequest interface{}

// TaskNotFound defines model for TaskNotFound.
type TaskNotFound interface{}

// Unauthorized defines model for Unauthorized.
type Unauthorized interface{}

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = NewTask

// PutTasksIdJSONRequestBody defines body for PutTasksId for application/json ContentType.
type PutTasksIdJSONRequestBody = UpdateTask

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(c *gin.Context)
	// Create a new task
	// (POST /tasks)
	PostTasks(c *gin.Context)
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(c *gin.Context, id int)
	// Get a task by ID
	// (GET /tasks/{id})
	GetTasksId(c *gin.Context, id int)
	// Update a task
	// (PUT /tasks/{id})
	PutTasksId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTasks(c)
}

// PostTasks operation middleware
func (siw *ServerInterfaceWrapper) PostTasks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTasks(c)
}

// DeleteTasksId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTasksId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTasksId(c, id)
}

// GetTasksId operation middleware
func (siw *ServerInterfaceWrapper) GetTasksId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTasksId(c, id)
}

// PutTasksId operation middleware
func (siw *ServerInterfaceWrapper) PutTasksId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutTasksId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/tasks", wrapper.GetTasks)
	router.POST(options.BaseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(options.BaseURL+"/tasks/:id", wrapper.DeleteTasksId)
	router.GET(options.BaseURL+"/tasks/:id", wrapper.GetTasksId)
	router.PUT(options.BaseURL+"/tasks/:id", wrapper.PutTasksId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVXW/rNgz9KwK3RyNJt2IPebt3wYYAw0Vx1z4VfVBsOlZrS6pEt8sC//eBUuLYsdsm",
	"3Tr0Tf4Qec4hebiF1FTWaNTkYb4Fh94a7TE8fJXZd3ys0RM/pUYT6nCU1pYqlaSMnt57o/kd/iUrW2I4",
	"OmcczPm+cDFAImyJ0qNIC0wfxMbUbv9JrEy2gaZpEsjQp05Zjtu/Dk0C19I/fDP0m6l19j48HEFoQyIP",
	"MUZSHv+RwI2WNRXGqb/xnVm7EQ58hrlf+C8BnxZYyVCRb/jMEPlonbHoSMVSkaKY9YhPgSJ8EiYXVKDQ",
	"+CxI+ocJJEAbizAHT07pdcjEWZVjore7iHftb2Z1j2lbiCEC7qMSKarUR7HUGeuEXjwXSAW6AIVhCOVF",
	"e1EYx9p3oK2MKVFqTqqycXa1Vo81CpWhJpUrdCI3h/gcKzeukgRzUJp+uTwEV5pwjY6Dn6reOcolHUXG",
	"VLyxmSQ8W8vAOVzN9sopo4UnSbV/AWdHxleY7qN+EGO+o3Ruhsm/CK/4nvhytQzVq6SWa6XXgkxmRKk8",
	"+YAhYodrfvuH8sQXIIEndD5GupjMJjOmaSxqaRXM4efJxWQGCVhJRdB2ypTCaY00BPMdySl8Qi9kyMxC",
	"yLIMQgQUXKcw88sM5vA70nWIl/St86fZ7By3uN3Cjw5zmMMP04MhT3eTPw1d0twNPePPOk3R+7wuRYsr",
	"ekZdVdJtIsIDAdbGGj/C+1eHYUJlzyL6ZK+M77ANBvWVvfttopEIn16juXe3pt9f5GpsBvpenOfGb8v7",
	"wjZIgzCZ8K3U5eZI4qhdR7rwPTbadKuyJsrNkzEUfhHes/DeYqpylUZnXG2EIi+Wi2Ed4pVQiWU27LzL",
	"kfnmiBHBMZMELuONf6dli2Ha29Mn7NielJGakDsZk7eH9GTV9qM6Jtns45tpfFQ/l/rBK1ohl4tgF9LJ",
	"CgmdDzZ1tNkX3UUhyAi3Kw0v87hRuBKKf2YLhgS0rML6zeB4yJOOTxwv6eYuAVuP9ELco2d1wlXd64T/",
	"3sg6u/0kL5v9T162X/Gf2QGidq0DNE3zTwAAAP//l5MTCqQMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
