// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateTask implements createTask operation.
	//
	// Creates a new task.
	//
	// POST /tasks
	CreateTask(ctx context.Context, req *NewTask) (*Task, error)
	// DeleteTask implements deleteTask operation.
	//
	// Deletes a specific task by its ID.
	//
	// DELETE /tasks/{id}
	DeleteTask(ctx context.Context, params DeleteTaskParams) (DeleteTaskRes, error)
	// GetTaskById implements getTaskById operation.
	//
	// Retrieves a specific task by its ID.
	//
	// GET /tasks/{id}
	GetTaskById(ctx context.Context, params GetTaskByIdParams) (GetTaskByIdRes, error)
	// GetTasks implements getTasks operation.
	//
	// Retrieves a list of all tasks.
	//
	// GET /tasks
	GetTasks(ctx context.Context) ([]Task, error)
	// UpdateTask implements updateTask operation.
	//
	// Updates a specific task by its ID.
	//
	// PUT /tasks/{id}
	UpdateTask(ctx context.Context, req *UpdateTask, params UpdateTaskParams) (UpdateTaskRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
