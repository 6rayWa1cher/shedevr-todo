// Package pkg provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package pkg

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CompletedEnum.
const (
	Cancelled CompletedEnum = "cancelled"
	No        CompletedEnum = "no"
	Yes       CompletedEnum = "yes"
)

// CompletedEnum Indicates whether the task is completed or not.
type CompletedEnum string

// Counter defines model for Counter.
type Counter struct {
	// MaxValue The max value of the counter
	MaxValue *float32 `json:"max_value,omitempty"`

	// Scale The scale of the counter
	Scale *string `json:"scale,omitempty"`

	// Value The value of the counter
	Value *float32 `json:"value,omitempty"`
}

// NewTask defines model for NewTask.
type NewTask struct {
	// Completed Indicates whether the task is completed or not.
	Completed *CompletedEnum `json:"completed,omitempty"`
	Counter   *Counter       `json:"counter,omitempty"`

	// Text The description of the task.
	Text *string `json:"text,omitempty"`

	// Title The title of the new task.
	Title string `json:"title"`
}

// Task defines model for Task.
type Task struct {
	// Completed Indicates whether the task is completed or not.
	Completed CompletedEnum `json:"completed"`
	Counter   *Counter      `json:"counter,omitempty"`

	// Id The unique identifier for the task.
	Id *int64 `json:"id,omitempty"`

	// Text The description of the task.
	Text string `json:"text"`

	// Title The title of the task.
	Title string `json:"title"`
}

// UpdateTask defines model for UpdateTask.
type UpdateTask struct {
	// Completed Indicates whether the task is completed or not.
	Completed CompletedEnum `json:"completed"`
	Counter   *Counter      `json:"counter,omitempty"`

	// Title The updated title of the task.
	Title string `json:"title"`
}

// BadRequest defines model for BadRequest.
type BadRequest interface{}

// TaskNotFound defines model for TaskNotFound.
type TaskNotFound interface{}

// Unauthorized defines model for Unauthorized.
type Unauthorized interface{}

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = NewTask

// PutTasksIdJSONRequestBody defines body for PutTasksId for application/json ContentType.
type PutTasksIdJSONRequestBody = UpdateTask

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(c *gin.Context)
	// Create a new task
	// (POST /tasks)
	PostTasks(c *gin.Context)
	// Delete a task
	// (DELETE /tasks/{id})
	DeleteTasksId(c *gin.Context, id int)
	// Get a task by ID
	// (GET /tasks/{id})
	GetTasksId(c *gin.Context, id int)
	// Update a task
	// (PUT /tasks/{id})
	PutTasksId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTasks(c)
}

// PostTasks operation middleware
func (siw *ServerInterfaceWrapper) PostTasks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTasks(c)
}

// DeleteTasksId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTasksId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTasksId(c, id)
}

// GetTasksId operation middleware
func (siw *ServerInterfaceWrapper) GetTasksId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTasksId(c, id)
}

// PutTasksId operation middleware
func (siw *ServerInterfaceWrapper) PutTasksId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutTasksId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/tasks", wrapper.GetTasks)
	router.POST(options.BaseURL+"/tasks", wrapper.PostTasks)
	router.DELETE(options.BaseURL+"/tasks/:id", wrapper.DeleteTasksId)
	router.GET(options.BaseURL+"/tasks/:id", wrapper.GetTasksId)
	router.PUT(options.BaseURL+"/tasks/:id", wrapper.PutTasksId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yWS2/cNhDHvwox7ZHY3aRGD3tL7LZYoAiM1DkZRkGTo10mEsnwYXtr6LsXQ+5DWmn9",
	"SNrYN4kSh/P/zXBm7kHaxlmDJgaY34PH4KwJmF/eC/URvyYMkd6kNRFNfhTO1VqKqK2Zfg7W0BreicbV",
	"mB+9tx7mtJ/5YoAzV6MIyOQK5Re2tslvP7Frq9bQti0HhUF67chufzu0HC5E+PLBxt9tMurb/CELzNjI",
	"qmxj5MjDPzh8MiLFlfX6H/zGU7sW9nqGZx/5j0OQK2xEjsipJesR1W8mNbTQN7EwihzCwG5XGFfoWVwh",
	"iyRKBya3m5n1JHICHDDbuYQ1BuBgLHCQwkisa1RwxSGuHcIcQvTaLInHqU0moqeznbcOfdQlWRpx9/eN",
	"qBMO3bpYIWvEHcufma2yV3JjaHeGSc01esiCRX3ETP501MTezQc8eZoX7W7FXn9GmTPwA95Sggy178jS",
	"y88eK5jDT9P9zZpuQjjtx6/lIPc4H95XfiOv8C6OC+usbOVR6CdjfKKOxxDnT1sDBm+PGWk5UJZqT7Iv",
	"NxavRrC9PDOtxqUmo78mZFqhibrS6FllfQ9cZX0jIsxBm/jryR6CNhGXLxGQ5wRj4xvvsB6LzyenRMRX",
	"kNnHEaTsovoeFA8xoD3aVHZ4+DsWNO1j784XOTkaYcRSmyWLVllW6xBD9qH4Dhe0+qcOkTYAhxv0oVh6",
	"M5lNZiTTOjTCaZjDL5PZ5C1wcCKuMu0pScpPSxzJqY8YvcYbDEzkkwmEqOsMIntBkcv9aKFgDn9gvMj2",
	"eL+tv53NntPJLh8OYM6b9mrYz/5KUmIIVarZzq/Sz1LTCL8uHu4FEBtnw4juU4+5qYleOeqLPbehozY3",
	"z/c0VzwutAh5LE+3tb/t51f0CdsB3zfPmxQex3tkUpEZjGJhh7peHyAu7Dro8veSaNN7rdqCm27GEPxZ",
	"XifwwaHUlZZlmLheMx0DW5wN41C25Egs1DDzTkbuN1ksHhwq4XBSdnwfy50P094M+YT5r4eySGNig5E/",
	"fkmfTG17VceQzf7/ZBq/qq+Lfq4VO5CLs1wuhBcNRvQhl6mDYfis2yhYtMxvQkPzb+koFAlNP1MJpgFY",
	"NLm7Kzi85LxTJw5ngPaKg0sjuVA667My4Tz1MuG/L2Sdbv+kWjb7QbVs2+JfcwUo7HYVoG3bfwMAAP//",
	"JL6HOEAPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
